// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // Set `x` to zero if zx=1
    Mux16(a=x , b=false , sel=zx , out=zxsol );

    // Set `y` to zero if zy=1
    Mux16(a=y , b=false , sel=zy , out=zysol );

    // Negate `zxsol` (the modified `x` value) if nx=1
    Not16(in=zxsol , out=notnewx );
    Mux16(a=zxsol , b=notnewx , sel=nx , out=nxSol );
    
    // Negate `zysol` (the modified `y` value) if ny=1
    Not16(in=zysol , out=notnewy );
    Mux16(a=zysol , b=notnewy , sel=ny , out=nySol );
    
    //Calculate the selected operation between `x` and `y`
    And16(a=nxSol , b=nySol , out=xAndy );
    Add16(a =nxSol , b =nySol , out =xAddy );
    Mux16(a=xAndy , b=xAddy , sel=f , out=fSol );
    
    //Optionally negate the final result based on `no`
    Not16(in=fSol , out=notfSol );
    Mux16(a=fSol , b=notfSol , sel=no , out=out, out[15]=MSB,out[0..7]=right, out[8..15]=left );
    
    //Calculate `zr` - Check if the `out` value is zero
    Or8Way(in=right, out=r);
    Or8Way(in=left, out=l);
    Or(a=r, b=l, out=Notzr);
    Not(in=Notzr, out=zr);
       
    //Calculate `ng` - Check if the `out` value is negative (MSB=1)
    Mux(a=false , b=true , sel=MSB , out=ng );

}