// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //Determines if the instruction is an A-instruction or C-instruction .
    Not(in=instruction[15] , out=instructionA );

    // Selects input for A-register: instruction or ALU output.
	Mux16(a=AluOutput , b=instruction , sel=instructionA , out=outMux0 );

    // Loads value into A-register for A-instruction or if instruction[5] is set.
    Or(a=instructionA , b=instruction[5] , out=loadARegister );
    ARegister(in=outMux0 , load=loadARegister , out[0..14]=addressM, out= AregisterOutput );

    // Chooses ALU input: A-register or inM (if instruction[12] is set).
    And(a=instruction[12] , b=instruction[15] , out=selMux2 );
    Mux16(a=AregisterOutput , b=inM , sel=selMux2 , out=outMux1 );

    // Loads ALU output into D-register if instruction[4] is set.
    And(a=instruction[4] , b=instruction[15] , out=loadD );
    DRegister(in=AluOutput , load=loadD , out=outDregister );

    // Performs ALU calculation with inputs from D-register and A-register/inM.
    ALU(x=outDregister , y=outMux1 , zx=instruction[11] , nx=instruction[10] , zy=instruction[9] , ny=instruction[8] , f=instruction[7] , no=instruction[6] , out=outM , out=AluOutput, zr=zr , ng=ng );

    // Writes to memory if instruction[3] is set.
    And(a=instruction[3] , b=instruction[15] , out=writeM );
   
    // Checks if ALU output is positive
    Not(in=ng , out=notng );
    Not(in=zr , out=notzr );
    And(a=notng , b=notzr , out=biggerthenzero );

    // Jumps if ALU output > 0 (JGT).
    And(a=instruction[0] , b=instruction[15] , out=jgt );
    And(a=biggerthenzero , b=jgt , out=JGT );

    // Jumps if ALU output == 0 (JEQ).
    And(a=instruction[1] , b=instruction[15] , out=jeq );
    And(a=jeq , b=zr , out=JEQ );

    // Jumps if ALU output < 0 (JLT).
    And(a=instruction[2] , b=instruction[15] , out=jlt );
    And(a=jlt , b=ng , out=JLT );

    // Combines jump conditions (JGT, JEQ, JLT).
    Or(a=JGT , b=JEQ , out=result1 );
    Or(a=result1 , b=JLT , out=loadPc );

    // Updates PC: increments, jumps, or resets.
    PC(in=AregisterOutput , load=loadPc , inc=true , reset=reset , out[0..14]=pc );
   
}