class SimonGame {

field Array sequence; // Array storing the sequence of shapes (1-4)
field int level; // Current game level (0-14)
field boolean gameOver; // Game state flag
field GameFrames drawer; // Handles frame drawing around shapes
field GameBoard board; // Handles game board display

/** Constructs a new Simon game */
constructor SimonGame new(){
     var int initialSeed;
    
    // Initialize random number generator with player input timing
    let initialSeed = RandSeed.getSeed();
    do Random.setSeed(initialSeed); 

    // Initialize game state and objects
    let sequence = Array.new(15); 
    let level = 0;
    let gameOver = false; 
    let drawer = GameFrames.new();
    let board = GameBoard.new();  

    // Set up initial game display
    do board.drawGrid();
    do board.drawPlayer();
    do board.drawLevel();
    do board.drawSimon(484);
    return this;
} 

/** Disposes all allocated memory for the game */
method void dispose() { 
    do sequence.dispose();  
    do drawer.dispose(); 
    do board.dispose();
    do Memory.deAlloc(this);
    return;

        return;
}


/** Adds a new random shape to the sequence and increases level */
    method void addNewShape() { 
        let sequence[level] = Random.nextShape(); // Add shape (1-4)
        let level = level + 1; // Move to next level
        return;
    }


/** Displays the current sequence to the player */
method void displaySequence() {
    var int i;
    var int waitTime;
    let i = 0;
    

    while (i < level) {

        // Last shape displays longer
        if (i = (level - 1)) {
            let waitTime = 800;
        }
        else {
            let waitTime = 600;
        }
        
        // Show frame around appropriate shape
        if (sequence[i] = 1) {
            do drawer.frameCircle();
        } 
        if (sequence[i] = 2) {
            do drawer.frameTriangle();
        } 
        if (sequence[i] = 3) {
            do drawer.frameSquare();
        }
        if (sequence[i] = 4) {
            do drawer.frameArrow();
        }
        
        // Keep frame visible
        do Sys.wait(waitTime);
        
        // Clear all frames
        do drawer.clearFrameCircle();
        do drawer.clearFrameTriangle();
        do drawer.clearFrameSquare();
        do drawer.clearFrameArrow();
        
        // Pause between shapes
        do Sys.wait(400);
        
        let i = i + 1;
    }
    return;
}

    /** Handles one complete round of gameplay */
    method void playRound() {
    var int j;
    var char userInput;
    var char key;
    let j = 0;


     // Show current level
    do Screen.setColor(true);
    do Output.moveCursor(3, 58);
    do Output.printInt(level + 1); 

    // Add new shape and show sequence
    do addNewShape();
    do displaySequence();
    
    
    
    // Process player input for each shape in sequence
    while(j < level) {
        
        let key = Keyboard.keyPressed();

        // Convert key presses to shape numbers
        if (key = 49) {  // '1' key
            do board.playerDrawCircle();
            do Sys.wait(700);
            // Convert ASCII to sequence number (49 -> 1)
            let userInput = 1;
        }
        if (key = 50) {  // '2' key
            do board.playerTriangle();
            do Sys.wait(700);
            let userInput = 2;
        }
        if (key = 51) {  // '3' key
            do board.playerDrawRectangle();
            do Sys.wait(700);
            let userInput = 3;
        }
        if (key = 52) {  // '4' key
            do board.playerDrawArrow();
            do Sys.wait(700);
            let userInput = 4;
        }

        // Process valid input
        if (userInput > 0) {
            do board.clearPlayerTurn();
            
            // Check for incorrect input
            if (~(userInput = sequence[j])) {
                let gameOver = true;
                do Screen.setColor(false);
                do Screen.drawRectangle(0, 0, 512, 250);
                do Screen.setColor(true);
                do Output.moveCursor(10, 25);
                do Output.printString("WRONG! GAME OVER");
                return;
            }
            let j = j + 1;
            let userInput = 0;  // Reset for next input
            
            // Wait for key release
            while (~(Keyboard.keyPressed() = 0)) {
                do Sys.wait(500);
            }
        }
    }
    
    // Clear level display
    do Screen.setColor(false);
    do Output.moveCursor(3, 58);
    do Output.printInt(level + 1);
    return;
}


    /** Main game loop */
    method void run() {

    do Sys.wait(500); // Initial pause

    // Continues until player wins (15 levels) or makes a mistake
    while ((level < 15) & (~gameOver)) {
        do playRound();
        if (~gameOver) {
            if (level = 15) {
                do Screen.setColor(false);
                do Screen.drawRectangle(0, 0, 512, 250);
                do Screen.setColor(true);
                do Output.moveCursor(10, 25);
                do Output.printString("YOU WON!");
            }
        }
    }
    return;
}






}